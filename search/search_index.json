{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o ao Reposit\u00f3rio","text":"<p>Reposit\u00f3rio criado com a finalidade de eu aprender:  -&gt; Polars  -&gt; DuckDB  -&gt; WeasyPrint  -&gt; MKDocs</p>"},{"location":"pastas/","title":"Pastas","text":"<p>Nesta se\u00e7\u00e3o, irei falar brevemente sobre as pastas do reposit\u00f3rio.</p>"},{"location":"pastas/arquivos_soltos/","title":"Arquivos Soltos","text":"<p>Arquivos que n\u00e3o est\u00e3o dentro de nenhuma pasta (ou seja, est\u00e3o na pasta raiz do projeto)</p>"},{"location":"python/","title":"Python","text":""},{"location":"python/etl/dataframe_utils/","title":"DataFrame Utils","text":"<p>Documenta\u00e7\u00e3o para o m\u00f3dulo dataframe_utils.py</p>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.Column","title":"<code>Column</code>","text":"<p>Representa uma coluna de um DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>initial_name</code> <code>str</code> <p>O nome inicial da coluna.</p> required <code>final_name</code> <code>str</code> <p>O nome final da coluna.</p> required <code>initial_dtype</code> <code>DataType</code> <p>O tipo de dados inicial da coluna.</p> required <code>final_dtype</code> <code>DataType</code> <p>O tipo de dados final da coluna.</p> required <p>Attributes:</p> Name Type Description <code>initial_name</code> <code>str</code> <p>O nome inicial da coluna.</p> <code>final_name</code> <code>str</code> <p>O nome final da coluna.</p> <code>initial_dtype</code> <code>DataType</code> <p>O tipo de dados inicial da coluna.</p> <code>final_dtype</code> <code>DataType</code> <p>O tipo de dados final da coluna.</p> <code>expression</code> <code>Expr</code> <p>A express\u00e3o da coluna.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>class Column:\n    \"\"\"\n    Representa uma coluna de um DataFrame.\n\n    Args:\n        initial_name (str): O nome inicial da coluna.\n        final_name (str): O nome final da coluna.\n        initial_dtype (pl.DataType): O tipo de dados inicial da coluna.\n        final_dtype (pl.DataType): O tipo de dados final da coluna.\n\n    Attributes:\n        initial_name (str): O nome inicial da coluna.\n        final_name (str): O nome final da coluna.\n        initial_dtype (pl.DataType): O tipo de dados inicial da coluna.\n        final_dtype (pl.DataType): O tipo de dados final da coluna.\n        expression (pl.Expr): A express\u00e3o da coluna.\n    \"\"\"\n\n    initial_name: str\n    final_name: str\n    initial_dtype: pl.DataType\n    final_dtype: pl.DataType\n    expression: pl.Expr\n\n    def __init__(\n        self,\n        initial_name: str,\n        final_name: str,\n        initial_dtype: pl.DataType,\n        final_dtype: pl.DataType,\n    ):\n        self.initial_name = initial_name\n        self.final_name = final_name\n        self.initial_dtype = initial_dtype\n        self.final_dtype = final_dtype\n        self.expression = pl.col(initial_name)\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.DataTypeDifferents","title":"<code>DataTypeDifferents</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exce\u00e7\u00e3o levantada quando os tipos de dados de uma ou mais colunas s\u00e3o diferentes do esperado.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>class DataTypeDifferents(Exception):\n    \"\"\"\n    Exce\u00e7\u00e3o levantada quando os tipos de dados de uma ou mais colunas s\u00e3o diferentes do esperado.\n    \"\"\"\n\n    ...\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.Table","title":"<code>Table</code>","text":"<p>Representa uma tabela.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>dict[str, Column]</code> <p>Dicion\u00e1rio que mapeia nomes de colunas para objetos da classe Column.</p> required <p>Attributes:</p> Name Type Description <code>columns</code> <code>dict[str, Column]</code> <p>Dicion\u00e1rio que mapeia nomes de colunas para objetos da classe Column.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>class Table:\n    \"\"\"\n    Representa uma tabela.\n\n    Args:\n        columns (dict[str, Column]): Dicion\u00e1rio que mapeia nomes de colunas para objetos\n            da classe Column.\n\n    Attributes:\n        columns (dict[str, Column]): Dicion\u00e1rio que mapeia nomes de colunas para objetos\n            da classe Column.\n    \"\"\"\n\n    columns: dict[str, Column]\n\n    def __init__(self, columns: dict[str, Column]) -&gt; None:\n        \"\"\"\n        Inicializa um objeto da classe Table.\n\n        Args:\n            columns: Dicion\u00e1rio que mapeia nomes de colunas para\n                objetos da classe Column.\n\n        Returns:\n            None.\n        \"\"\"\n        self.columns = columns\n\n    def set_expr(self, column_name: str, expression: pl.Expr) -&gt; None:\n        \"\"\"\n        Define a express\u00e3o de uma coluna.\n\n        Args:\n            column_name: Nome da coluna.\n            expression: Express\u00e3o da coluna.\n\n        Returns:\n            None.\n        \"\"\"\n        self.columns[column_name].expression = expression\n\n    def get_expr(self, column_name: str) -&gt; pl.Expr:\n        \"\"\"\n        Obt\u00e9m a express\u00e3o de uma coluna.\n\n        Args:\n            column_name (str): Nome da coluna.\n\n        Returns:\n            Express\u00e3o da coluna.\n        \"\"\"\n        return self.columns[column_name].expression\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.Table.__init__","title":"<code>__init__(columns)</code>","text":"<p>Inicializa um objeto da classe Table.</p> <p>Parameters:</p> Name Type Description Default <code>columns</code> <code>dict[str, Column]</code> <p>Dicion\u00e1rio que mapeia nomes de colunas para objetos da classe Column.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>def __init__(self, columns: dict[str, Column]) -&gt; None:\n    \"\"\"\n    Inicializa um objeto da classe Table.\n\n    Args:\n        columns: Dicion\u00e1rio que mapeia nomes de colunas para\n            objetos da classe Column.\n\n    Returns:\n        None.\n    \"\"\"\n    self.columns = columns\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.Table.get_expr","title":"<code>get_expr(column_name)</code>","text":"<p>Obt\u00e9m a express\u00e3o de uma coluna.</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Nome da coluna.</p> required <p>Returns:</p> Type Description <code>Expr</code> <p>Express\u00e3o da coluna.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>def get_expr(self, column_name: str) -&gt; pl.Expr:\n    \"\"\"\n    Obt\u00e9m a express\u00e3o de uma coluna.\n\n    Args:\n        column_name (str): Nome da coluna.\n\n    Returns:\n        Express\u00e3o da coluna.\n    \"\"\"\n    return self.columns[column_name].expression\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.Table.set_expr","title":"<code>set_expr(column_name, expression)</code>","text":"<p>Define a express\u00e3o de uma coluna.</p> <p>Parameters:</p> Name Type Description Default <code>column_name</code> <code>str</code> <p>Nome da coluna.</p> required <code>expression</code> <code>Expr</code> <p>Express\u00e3o da coluna.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>def set_expr(self, column_name: str, expression: pl.Expr) -&gt; None:\n    \"\"\"\n    Define a express\u00e3o de uma coluna.\n\n    Args:\n        column_name: Nome da coluna.\n        expression: Express\u00e3o da coluna.\n\n    Returns:\n        None.\n    \"\"\"\n    self.columns[column_name].expression = expression\n</code></pre>"},{"location":"python/etl/dataframe_utils/#src.etl.dataframe_utils.enade_table","title":"<code>enade_table()</code>","text":"<p>Cria um objeto Table com as colunas necess\u00e1rias para a tabela ENADE.</p> <p>Returns:</p> Type Description <code>Table</code> <p>Um objeto Table com as colunas para a tabela ENADE.</p> Source code in <code>src/etl/dataframe_utils.py</code> <pre><code>def enade_table() -&gt; Table:\n    \"\"\"\n    Cria um objeto Table com as colunas necess\u00e1rias para a tabela ENADE.\n\n    Returns:\n        Um objeto Table com as colunas para a tabela ENADE.\n    \"\"\"\n\n    columns = {\n        \"ano\": Column(\"Ano\", \"ano\", pl.Int64(), pl.Int16()),\n        \"area_avaliacao\": Column(\n            \"\u00c1rea de Avalia\u00e7\u00e3o\", \"area_avaliacao\", pl.String(), pl.String()\n        ),\n        \"ies\": Column(\"Nome da IES\", \"ies\", pl.String(), pl.String()),\n        \"org_acad\": Column(\n            \"Organiza\u00e7\u00e3o Acad\u00eamica\", \"org_acad\", pl.String(), pl.String()\n        ),\n        \"cat_acad\": Column(\n            \"Categoria Administrativa\", \"cat_acad\", pl.String(), pl.String()\n        ),\n        \"mod_ens\": Column(\n            \"Modalidade de Ensino\", \"mod_ens\", pl.String(), pl.String()\n        ),\n        \"municipio_curso\": Column(\n            \"Munic\u00edpio do Curso\", \"municipio_curso\", pl.String(), pl.String()\n        ),\n        \"sigla_uf\": Column(\"Sigla da UF\", \"sigla_uf\", pl.String(), pl.String()),\n        \"num_conc_insc\": Column(\n            \"N\u00ba de Concluintes Inscritos\",\n            \"num_conc_insc\",\n            pl.Int64(),\n            pl.Int16(),\n        ),\n        \"num_conc_part\": Column(\n            \"N\u00ba  de Concluintes Participantes\",\n            \"num_conc_part\",\n            pl.Int64(),\n            pl.Int16(),\n        ),\n        \"nota_bruta_fg\": Column(\n            \"Nota Bruta - FG\", \"nota_bruta_fg\", pl.Float64(), pl.Float32()\n        ),\n        \"nota_padronizada_fg\": Column(\n            \"Nota Padronizada - FG\",\n            \"nota_padronizada_fg\",\n            pl.Float64(),\n            pl.Float32(),\n        ),\n        \"nota_bruta_ce\": Column(\n            \"Nota Bruta - CE\", \"nota_bruta_ce\", pl.Float64(), pl.Float32()\n        ),\n        \"conc_enade_cont\": Column(\n            \"Conceito Enade (Cont\u00ednuo)\",\n            \"conc_enade_cont\",\n            pl.Float64(),\n            pl.Float32(),\n        ),\n        \"conc_enade_faixa\": Column(\n            \"Conceito Enade (Faixa)\", \"conc_enade_faixa\", pl.String(), pl.Int8()\n        ),\n    }\n\n    return Table(columns)\n</code></pre>"},{"location":"python/etl/etl_routine/","title":"Rotina ETL","text":"<p>Documenta\u00e7\u00e3o do m\u00f3dulo etl_routine.py</p>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.concatenate_enade","title":"<code>concatenate_enade(globbing_pattern)</code>","text":"<p>Concatena v\u00e1rios arquivos Parquet em um \u00fanico arquivo Parquet.</p> <p>Parameters:</p> Name Type Description Default <code>globbing_pattern</code> <code>str</code> <p>O padr\u00e3o de glob para corresponder aos arquivos Parquet.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def concatenate_enade(globbing_pattern: str) -&gt; None:\n    \"\"\"\n    Concatena v\u00e1rios arquivos Parquet em um \u00fanico arquivo Parquet.\n\n    Args:\n        globbing_pattern: O padr\u00e3o de glob para corresponder aos arquivos Parquet.\n\n    Returns:\n        Nada.\n    \"\"\"\n    all_enade_files = reading_data.read_multiple_parquet(globbing_pattern)\n    loading_data.write_parquet(all_enade_files, \"data/processed/enade.parquet\")\n</code></pre>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.get_raw_enade","title":"<code>get_raw_enade(path)</code>","text":"<p>Fun\u00e7\u00e3o para obter os dados brutos do arquivo Excel no caminho especificado.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>O caminho para o arquivo Excel.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame contendo os dados brutos do arquivo Excel.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def get_raw_enade(path: str) -&gt; pl.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o para obter os dados brutos do arquivo Excel no caminho especificado.\n\n    Args:\n        path: O caminho para o arquivo Excel.\n\n    Returns:\n        O DataFrame contendo os dados brutos do arquivo Excel.\n    \"\"\"\n    return reading_data.read_excel(path)\n</code></pre>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.process_enade","title":"<code>process_enade(raw_enade)</code>","text":"<p>Processa os dados do arquivo Excel e retorna um DataFrame processado.</p> <p>Parameters:</p> Name Type Description Default <code>raw_enade</code> <code>DataFrame</code> <p>O DataFrame contendo os dados brutos do arquivo Excel.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame com as transforma\u00e7\u00f5es aplicadas aos dados.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def process_enade(raw_enade: pl.DataFrame) -&gt; pl.DataFrame:\n    \"\"\"\n    Processa os dados do arquivo Excel e retorna um DataFrame processado.\n\n    Args:\n        raw_enade: O DataFrame contendo os dados brutos do arquivo Excel.\n\n    Returns:\n        O DataFrame com as transforma\u00e7\u00f5es aplicadas aos dados.\n    \"\"\"\n    table = dataframe_utils.enade_table()\n\n    transforming_data.verify_datatype(raw_enade, table)\n\n    table = transforming_data.change_column_names(table)\n\n    table = transforming_data.transform_columns(table)\n\n    table = transforming_data.casting_columns(table)\n\n    table = transforming_data.standardizing_data(table)\n\n    table = transforming_data.shrinking_numerical_columns(table)\n\n    return transforming_data.transform(raw_enade, table)\n</code></pre>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.routine_all_enade","title":"<code>routine_all_enade(path_folder_to_find, path_folder_to_save)</code>","text":"<p>Realiza a rotina de ETL para todos os arquivos Excel de conceito ENADE.</p> <p>Parameters:</p> Name Type Description Default <code>path_folder_to_find</code> <code>str</code> <p>O caminho onde os arquivos Excel ser\u00e3o procurados.</p> required <code>path_folder_to_save</code> <code>str</code> <p>O caminho onde os DataFrames processados ser\u00e3o salvos.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def routine_all_enade(\n    path_folder_to_find: str, path_folder_to_save: str\n) -&gt; None:\n    \"\"\"\n    Realiza a rotina de ETL para todos os arquivos Excel de conceito ENADE.\n\n    Args:\n        path_folder_to_find: O caminho onde os arquivos Excel ser\u00e3o procurados.\n        path_folder_to_save: O caminho onde os DataFrames processados ser\u00e3o salvos.\n\n    Returns:\n        Nada.\n    \"\"\"\n    logger.info(\"Iniciando a rotina ETL...\\n\")\n\n    years = [2021, 2019, 2018, 2017]\n    for year in years:\n        path = f\"{path_folder_to_find}/conceito_enade_{year}.xlsx\"\n\n        filename_to_save = f\"enade_{year}\"\n\n        routine_enade(path, path_folder_to_save, filename_to_save)\n\n    logger.info(\"Rotina ETL finalizada\")\n</code></pre>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.routine_enade","title":"<code>routine_enade(path, path_folder_to_save, filename)</code>","text":"<p>Processa os dados do arquivo Excel e salva o resultado em formato Parquet.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>O caminho do arquivo Excel a ser processado.</p> required <code>path_folder_to_save</code> <code>str</code> <p>A pasta onde o DataFrame processado ser\u00e1 salvo.</p> required <code>filename</code> <code>str</code> <p>O nome do arquivo que ser\u00e1 criado.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def routine_enade(\n    path: str,\n    path_folder_to_save: str,\n    filename: str,\n) -&gt; None:\n    \"\"\"\n    Processa os dados do arquivo Excel e salva o resultado em formato Parquet.\n\n    Args:\n        path: O caminho do arquivo Excel a ser processado.\n        path_folder_to_save: A pasta onde o DataFrame processado ser\u00e1 salvo.\n        filename: O nome do arquivo que ser\u00e1 criado.\n\n    Returns:\n        Nada.\n    \"\"\"\n    raw_enade = get_raw_enade(path)\n\n    processed_enade = process_enade(raw_enade)\n\n    save_enade(path_folder_to_save, filename, processed_enade)\n</code></pre>"},{"location":"python/etl/etl_routine/#src.etl.etl_routine.save_enade","title":"<code>save_enade(path_folder, filename, df)</code>","text":"<p>Salva um DataFrame em formato Parquet em um determinado caminho.</p> <p>Parameters:</p> Name Type Description Default <code>path_folder</code> <code>str</code> <p>O caminho onde o DataFrame ser\u00e1 salvo.</p> required <code>filename</code> <code>str</code> <p>O nome do arquivo de sa\u00edda.</p> required <code>df</code> <code>DataFrame</code> <p>O DataFrame a ser salvo.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/etl_routine.py</code> <pre><code>def save_enade(path_folder: str, filename: str, df: pl.DataFrame) -&gt; None:\n    \"\"\"\n    Salva um DataFrame em formato Parquet em um determinado caminho.\n\n    Args:\n        path_folder: O caminho onde o DataFrame ser\u00e1 salvo.\n        filename: O nome do arquivo de sa\u00edda.\n        df: O DataFrame a ser salvo.\n\n    Returns:\n        Nada.\n    \"\"\"\n    loading_data.write_parquet(df, f\"{path_folder}/{filename}.parquet\")\n</code></pre>"},{"location":"python/etl/loading_data/","title":"Salvando Dados","text":"<p>Documenta\u00e7\u00e3o do m\u00f3dulo loading_data.py</p>"},{"location":"python/etl/loading_data/#src.etl.loading_data.write_csv","title":"<code>write_csv(df, path)</code>","text":"<p>Escreve um DataFrame em formato CSV em um determinado caminho.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>O DataFrame a ser escrito.</p> required <code>path</code> <code>str</code> <p>O caminho onde o DataFrame ser\u00e1 salvo.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/loading_data.py</code> <pre><code>def write_csv(df: pl.DataFrame, path: str) -&gt; None:\n    \"\"\"Escreve um DataFrame em formato CSV em um determinado caminho.\n\n    Args:\n        df: O DataFrame a ser escrito.\n        path: O caminho onde o DataFrame ser\u00e1 salvo.\n\n    Returns:\n        Nada.\n    \"\"\"\n    logger.info(f\"Writing {path}\")\n    df.write_csv(path)\n    logger.info(\"Done!\\n\")\n</code></pre>"},{"location":"python/etl/loading_data/#src.etl.loading_data.write_parquet","title":"<code>write_parquet(df, path)</code>","text":"<p>Escreve um DataFrame em formato Parquet em um determinado caminho.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>O DataFrame a ser escrito.</p> required <code>path</code> <code>str</code> <p>O caminho onde o DataFrame ser\u00e1 salvo.</p> required <p>Returns:</p> Type Description <code>None</code> <p>Nada.</p> Source code in <code>src/etl/loading_data.py</code> <pre><code>def write_parquet(df: pl.DataFrame, path: str) -&gt; None:\n    \"\"\"Escreve um DataFrame em formato Parquet em um determinado caminho.\n\n    Args:\n        df: O DataFrame a ser escrito.\n        path: O caminho onde o DataFrame ser\u00e1 salvo.\n\n    Returns:\n        Nada.\n    \"\"\"\n    logger.info(f\"Writing {path}...\")\n    df.write_parquet(path)\n    logger.info(\"Done!\\n\")\n</code></pre>"},{"location":"python/etl/reading_data/","title":"Lendo Dados","text":"<p>Documenta\u00e7\u00e3o do m\u00f3dulo reading_data.py</p>"},{"location":"python/etl/reading_data/#src.etl.reading_data.read_enade_excel","title":"<code>read_enade_excel(path)</code>","text":"<p>Leia um arquivo Excel do caminho especificado, selecionando apenas as colunas especificadas na tabela ENADE.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>O caminho para o arquivo Excel.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame contendo os dados do arquivo Excel, com apenas as colunas especificadas na tabela ENADE.</p> Source code in <code>src/etl/reading_data.py</code> <pre><code>def read_enade_excel(path: str) -&gt; pl.DataFrame:\n    \"\"\"\n    Leia um arquivo Excel do caminho especificado, selecionando apenas as colunas\n    especificadas na tabela ENADE.\n\n    Args:\n        path: O caminho para o arquivo Excel.\n\n    Returns:\n        O DataFrame contendo os dados do arquivo Excel, com apenas as colunas especificadas na tabela ENADE.\n    \"\"\"\n\n    logger.info(f\"Reading {path}...\")\n\n    # Defina as colunas a serem selecionadas do arquivo Excel\n    table = dataframe_utils.enade_table()\n    columns = list(table.columns.keys())\n\n    # Leia o arquivo Excel, selecionando apenas as colunas especificadas\n    df = pl.read_excel(path, engine=\"calamine\", columns=columns)\n\n    logger.info(f\"Done reading {path}\")\n\n    return df\n</code></pre>"},{"location":"python/etl/reading_data/#src.etl.reading_data.read_excel","title":"<code>read_excel(path)</code>","text":"<p>Leia um arquivo Excel do caminho especificado.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>O caminho para o arquivo Excel.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame contendo os dados do arquivo Excel.</p> Source code in <code>src/etl/reading_data.py</code> <pre><code>def read_excel(path: str) -&gt; pl.DataFrame:\n    \"\"\"\n    Leia um arquivo Excel do caminho especificado.\n\n    Args:\n        path: O caminho para o arquivo Excel.\n\n    Returns:\n        O DataFrame contendo os dados do arquivo Excel.\n    \"\"\"\n\n    logger.info(f\"Reading {path}...\")\n\n    df = pl.read_excel(path, engine=\"calamine\")\n\n    logger.info(f\"Done reading {path}\")\n\n    return df\n</code></pre>"},{"location":"python/etl/reading_data/#src.etl.reading_data.read_multiple_parquet","title":"<code>read_multiple_parquet(globbing_pattern)</code>","text":"<p>L\u00ea v\u00e1rios arquivos Parquet a partir do padr\u00e3o de glob fornecido.</p> <p>Parameters:</p> Name Type Description Default <code>globbing_pattern</code> <code>str</code> <p>O padr\u00e3o de glob para corresponder aos arquivos                     Parquet.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame contendo os dados de todos os arquivos Parquet correspondentes ao padr\u00e3o de glob.</p> Source code in <code>src/etl/reading_data.py</code> <pre><code>def read_multiple_parquet(globbing_pattern: str) -&gt; pl.DataFrame:\n    \"\"\"\n    L\u00ea v\u00e1rios arquivos Parquet a partir do padr\u00e3o de glob fornecido.\n\n    Args:\n        globbing_pattern: O padr\u00e3o de glob para corresponder aos arquivos\n                                Parquet.\n\n    Returns:\n        O DataFrame contendo os dados de todos os arquivos Parquet correspondentes ao padr\u00e3o de glob.\n    \"\"\"\n\n    logger.info(f\"Reading {globbing_pattern}...\")\n\n    # Ler os arquivos Parquet e concaten\u00e1-los em um \u00fanico DataFrame\n    df = pl.read_parquet(globbing_pattern)\n\n    logger.info(f\"Done reading {globbing_pattern}\")\n\n    return df\n</code></pre>"},{"location":"python/etl/transforming_data/","title":"Transformando Dados","text":"<p>Documenta\u00e7\u00e3o do m\u00f3dulo transforming_data.py</p>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.casting_columns","title":"<code>casting_columns(table)</code>","text":"<p>Realiza o casting de todas as colunas da tabela para o tipo de dados final definido.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser alterada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com as colunas transformadas.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def casting_columns(table: dataframe_utils.Table) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Realiza o casting de todas as colunas da tabela para o tipo de dados final definido.\n\n    Args:\n        table: A tabela a ser alterada.\n\n    Returns:\n        A tabela com as colunas transformadas.\n    \"\"\"\n    columns = table.columns\n\n    for column in columns.values():\n        table.set_expr(\n            column.final_name, column.expression.cast(column.final_dtype)\n        )\n\n    return table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.change_column_names","title":"<code>change_column_names(table)</code>","text":"<p>Altera o nome das colunas de um DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser alterada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com o nome das colunas alteradas.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def change_column_names(table: dataframe_utils.Table) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Altera o nome das colunas de um DataFrame.\n\n    Args:\n        table: A tabela a ser alterada.\n\n    Returns:\n        A tabela com o nome das colunas alteradas.\n    \"\"\"\n    columns = table.columns\n\n    for column in columns.values():\n        table.set_expr(\n            column.final_name,\n            table.get_expr(column.final_name).alias(column.final_name),\n        )\n\n    return table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.shrinking_numerical_columns","title":"<code>shrinking_numerical_columns(table)</code>","text":"<p>Reduz o tamanho dos dados de todas as colunas num\u00e9ricas de uma tabela.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser transformada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com os tipos de dados das colunas num\u00e9ricas otimizados em rela\u00e7\u00e3o \u00e0 armazenamento.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def shrinking_numerical_columns(\n    table: dataframe_utils.Table,\n) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Reduz o tamanho dos dados de todas as colunas num\u00e9ricas de uma tabela.\n\n    Args:\n        table: A tabela a ser transformada.\n\n    Returns:\n        A tabela com os tipos de dados das colunas num\u00e9ricas otimizados em rela\u00e7\u00e3o \u00e0 armazenamento.\n    \"\"\"\n    columns = table.columns\n\n    for column in columns.values():\n        table.set_expr(column.final_name, column.expression.shrink_dtype())\n\n    return table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.standardizing_data","title":"<code>standardizing_data(table)</code>","text":"<p>Aplica transforma\u00e7\u00f5es para padronizar os dados de uma tabela.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser transformada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com os dados padronizados.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def standardizing_data(table: dataframe_utils.Table) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Aplica transforma\u00e7\u00f5es para padronizar os dados de uma tabela.\n\n    Args:\n        table: A tabela a ser transformada.\n\n    Returns:\n        A tabela com os dados padronizados.\n    \"\"\"\n    mod_strings_table = standardizing_strings(table)\n\n    return mod_strings_table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.standardizing_strings","title":"<code>standardizing_strings(table)</code>","text":"<p>Aplica transforma\u00e7\u00f5es para padronizar strings nas colunas de uma tabela.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser transformada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com as strings padronizadas.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def standardizing_strings(\n    table: dataframe_utils.Table,\n) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Aplica transforma\u00e7\u00f5es para padronizar strings nas colunas de uma tabela.\n\n    Args:\n        table: A tabela a ser transformada.\n\n    Returns:\n        A tabela com as strings padronizadas.\n    \"\"\"\n    columns = table.columns\n\n    for column in columns.values():\n        if column.final_dtype.is_(pl.String):\n            table.set_expr(\n                column.final_name,\n                column.expression.str.to_lowercase()\n                .str.strip_chars()\n                .str.replace_all(\"\u00e1\", \"a\")\n                .str.replace_all(\"\u00e2\", \"a\")\n                .str.replace_all(\"\u00e3\", \"a\")\n                .str.replace_all(\"\u00ea\", \"e\")\n                .str.replace_all(\"\u00e9\", \"a\")\n                .str.replace_all(\"\u00ed\", \"i\")\n                .str.replace_all(\"\u00f5\", \"o\")\n                .str.replace_all(\"\u00f3\", \"o\")\n                .str.replace_all(\"\u00fa\", \"u\")\n                .str.replace_all(\"\u00e7\", \"c\")\n                .str.replace_all(\"-\", \" \")\n                .str.replace_all(\"  \", \" \"),\n            )\n\n    return table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.transform","title":"<code>transform(df, table)</code>","text":"<p>Aplica transforma\u00e7\u00f5es a uma DataFrame com base em uma tabela especificada.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>O DataFrame a ser transformado.</p> required <code>table</code> <code>Table</code> <p>A tabela que define as transforma\u00e7\u00f5es a serem aplicadas.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>O DataFrame transformado.</p> <p>Raises:</p> Type Description <code>ComputeError</code> <p>Se ocorrer um erro de computa\u00e7\u00e3o durante a transforma\u00e7\u00e3o.</p> <code>Exception</code> <p>Se ocorrer um erro inesperado durante a transforma\u00e7\u00e3o.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def transform(\n    df: pl.DataFrame,\n    table: dataframe_utils.Table,\n) -&gt; pl.DataFrame:\n    \"\"\"\n    Aplica transforma\u00e7\u00f5es a uma DataFrame com base em uma tabela especificada.\n\n    Args:\n        df: O DataFrame a ser transformado.\n        table: A tabela que define as transforma\u00e7\u00f5es a serem aplicadas.\n\n    Returns:\n        O DataFrame transformado.\n\n    Raises:\n        polars.ComputeError: Se ocorrer um erro de computa\u00e7\u00e3o durante a transforma\u00e7\u00e3o.\n        Exception: Se ocorrer um erro inesperado durante a transforma\u00e7\u00e3o.\n    \"\"\"\n    transformations = []\n\n    columns = table.columns\n    for column in columns.values():\n        transformations.append(column.expression)\n\n    logger.info(\"Starting transformation...\")\n    try:\n        final_df = (\n            df.lazy().select(transformations).drop_nulls().unique().collect()\n        )\n\n        logger.info(\"Transformation done!\")\n\n        return final_df\n\n    except pl.ComputeError as e:\n        logger.error(e)\n        raise\n\n    except Exception as e:\n        logger.error(f\"Unexpected error: {e}\")\n        raise\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.transform_column_conceito_enade_faixa","title":"<code>transform_column_conceito_enade_faixa(table)</code>","text":"<p>Transforma a coluna \"conc_enade_faixa\" de um DataFrame em um tipo de dados Int8.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser alterada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com a coluna \"conc_enade_faixa\" transformada.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def transform_column_conceito_enade_faixa(\n    table: dataframe_utils.Table,\n) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Transforma a coluna \"conc_enade_faixa\" de um DataFrame em um tipo de dados Int8.\n\n    Args:\n        table: A tabela a ser alterada.\n\n    Returns:\n        A tabela com a coluna \"conc_enade_faixa\" transformada.\n    \"\"\"\n    table.set_expr(\n        \"conc_enade_faixa\",\n        table.get_expr(\"conc_enade_faixa\").cast(pl.Int8, strict=False),\n    )\n\n    return table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.transform_columns","title":"<code>transform_columns(table)</code>","text":"<p>Aplica transforma\u00e7\u00f5es espec\u00edficas em colunas espec\u00edficas.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>A tabela a ser transformada.</p> required <p>Returns:</p> Type Description <code>Table</code> <p>A tabela com as transforma\u00e7\u00f5es aplicadas.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def transform_columns(table: dataframe_utils.Table) -&gt; dataframe_utils.Table:\n    \"\"\"\n    Aplica transforma\u00e7\u00f5es espec\u00edficas em colunas espec\u00edficas.\n\n    Args:\n        table: A tabela a ser transformada.\n\n    Returns:\n        A tabela com as transforma\u00e7\u00f5es aplicadas.\n    \"\"\"\n    mod1_table = transform_column_conceito_enade_faixa(table)\n\n    return mod1_table\n</code></pre>"},{"location":"python/etl/transforming_data/#src.etl.transforming_data.verify_datatype","title":"<code>verify_datatype(df, table)</code>","text":"<p>Verifica se os tipos de dados de uma DataFrame s\u00e3o compat\u00edveis com a tabela especificada.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>O DataFrame a ser verificado.</p> required <code>table</code> <code>Table</code> <p>A tabela a ser usada como refer\u00eancia.</p> required <p>Raises:</p> Type Description <code>DataTypeDifferents</code> <p>Se houver colunas com tipos de dados diferentes do esperado.</p> <p>Returns:</p> Type Description <code>None</code> <p>Nenhuma valor \u00e9 retornado.</p> Source code in <code>src/etl/transforming_data.py</code> <pre><code>def verify_datatype(df: pl.DataFrame, table: dataframe_utils.Table) -&gt; None:\n    \"\"\"\n    Verifica se os tipos de dados de uma DataFrame s\u00e3o compat\u00edveis com a tabela especificada.\n\n    Args:\n        df: O DataFrame a ser verificado.\n        table: A tabela a ser usada como refer\u00eancia.\n\n    Raises:\n        dataframe_utils.DataTypeDifferents: Se houver colunas com tipos de dados diferentes do esperado.\n\n    Returns:\n        Nenhuma valor \u00e9 retornado.\n    \"\"\"\n    columns = table.columns.values()\n\n    schema = df.schema\n\n    wrong_columns = []\n\n    for column in columns:\n        if not (schema[column.initial_name].is_(column.initial_dtype)):\n            wrong_columns.append(\n                [\n                    column.initial_name,\n                    schema[column.initial_name],\n                    column.initial_dtype,\n                ]\n            )\n\n    if len(wrong_columns) &gt;= 1:\n        raise dataframe_utils.DataTypeDifferents(f\"{wrong_columns}\")\n</code></pre>"}]}